name: Build

on:
  push:
    branches:
      - main
      - tmp
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  release:
    types: [created]

jobs:
  test:
    name: ${{ matrix.os }} ${{ matrix.gcrypt }}
    runs-on: ${{ matrix.os }}
    env:
      CMAKE_C_COMPILER: ${{ matrix.compiler }}
      CMAKE_C_FLAGS: -Werror
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "ubuntu-18.04"]
        ndpid_gcrypt: ["-DNDPI_WITH_GCRYPT=OFF", "-DNDPI_WITH_GCRYPT=ON"]
        ndpid_zlib: ["-DENABLE_ZLIB=OFF", "-DENABLE_ZLIB=ON"]
        ndpi_min_version: ["4.5"]
        include:
          - compiler: "default-cc"
            os: "ubuntu-latest"
            sanitizer: "-DENABLE_SANITIZER=ON"
          - compiler: "clang-12"
            os: "ubuntu-latest"
            sanitizer: "-DENABLE_SANITIZER_THREAD=ON"
          - compiler: "gcc-10"
            os: "ubuntu-latest"
            sanitizer: "-DENABLE_SANITIZER=ON"
          - compiler: "gcc-7"
            os: "ubuntu-18.04"
            sanitizer: "-DENABLE_SANITIZER=ON"

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false
          fetch-depth: 1
      - name: Install Ubuntu Prerequisites
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install autoconf automake cmake libtool pkg-config gettext libjson-c-dev flex bison libpcap-dev zlib1g-dev
          sudo apt-get install ${{ matrix.compiler }} lcov iproute2
          sudo apt-get install rpm alien
      - name: Install Ubuntu Prerequisites (libgcrypt)
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.ndpid_gcrypt, '-DNDPI_WITH_GCRYPT=ON')
        run: |
          sudo apt-get install libgcrypt20-dev
      - name: Install Ubuntu Prerequisities (zlib)
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.ndpid_zlib, '-DENABLE_ZLIB=ON')
        run: |
          sudo apt-get install zlib1g-dev
      - name: Checking Network Buffer Size
        run: |
          C_VAL=$(cat config.h | sed -n 's/^#define\s\+NETWORK_BUFFER_MAX_SIZE\s\+\([0-9]\+\).*$/\1/gp')
          PY_VAL=$(cat dependencies/nDPIsrvd.py | sed -n 's/^NETWORK_BUFFER_MAX_SIZE = \([0-9]\+\).*$/\1/gp')
          test ${C_VAL} = ${PY_VAL}
      - name: Configure nDPId
        run: |
          mkdir build && cd build
          cmake .. -DENABLE_SYSTEMD=ON -DENABLE_COVERAGE=ON -DBUILD_EXAMPLES=ON -DBUILD_NDPI=ON ${{ matrix.sanitizer }} ${{ matrix.ndpid_zlib }} ${{ matrix.ndpid_gcrypt }}
      - name: Build nDPId
        run: |
          make -C build all VERBOSE=1
      - name: Test EXEC
        run: |
          ./build/nDPId-test || test $? -eq 1
          ./build/nDPId -h || test $? -eq 1
          ./build/nDPIsrvd -h || test $? -eq 1
      - name: Test DIFF
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.ndpid_gcrypt, '-DNDPI_WITH_GCRYPT=OFF')
        run: |
          ./test/run_tests.sh ./libnDPI ./build/nDPId-test
      - name: Daemon
        run: |
          make -C ./build daemon VERBOSE=1
          make -C ./build daemon VERBOSE=1
      - name: Coverage
        run: |
          make -C ./build coverage
      - name: Dist
        run: |
          make -C ./build dist
      - name: CPack DEB
        run: |
          cd ./build && cpack -G DEB && sudo dpkg -i nDPId-*.deb && cd ..
      - name: CPack RPM
        run: |
          cd ./build && cpack -G RPM
      - name: systemd test
        if: startsWith(matrix.os, 'ubuntu-latest') && startsWith(matrix.compiler, 'default-cc')
        run: |
          sudo systemctl daemon-reload
          sudo systemctl enable ndpid@lo
          sudo systemctl start ndpid@lo
          sudo systemctl status ndpisrvd.service ndpid@lo.service
          sudo systemctl show ndpisrvd.service ndpid@lo.service -p SubState,ActiveState
      - name: Build against libnDPI-${{ matrix.ndpi_min_version }}
        run: |
          mkdir build-local-ndpi && cd build-local-ndpi
          WGET_RET=0
          wget 'https://github.com/ntop/nDPI/archive/refs/tags/${{ matrix.ndpi_min_version }}.tar.gz' || { WGET_RET=$?; true; }
          echo "wget returned: ${WGET_RET}"
          test $WGET_RET -ne 8 || echo "::warning file=nDPId.c::New libnDPI release required to build against release tarball."
          test $WGET_RET -ne 0 || { tar -xzvf ${{ matrix.ndpi_min_version }}.tar.gz && cd nDPI-${{ matrix.ndpi_min_version }} && ./autogen.sh --prefix=/usr --with-only-libndpi CC=${{ matrix.compiler }} CXX=false CFLAGS='-Werror' && sudo make install && cd .. ; }
          test $WGET_RET -ne 0 || { echo "running cmake .."; cmake .. -DENABLE_COVERAGE=ON -DBUILD_EXAMPLES=ON -DBUILD_NDPI=OFF -DENABLE_SANITIZER=ON ${{ matrix.ndpi_min_version }} ; }
          test $WGET_RET -ne 0 || { echo "running make .."; make all VERBOSE=1 ; }
          test $WGET_RET -eq 0 -o $WGET_RET -eq 8
